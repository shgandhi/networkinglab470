# Created by Topology-Converter v{{ version }}
#    Template Revision: v4.6.7
#    https://github.com/cumulusnetworks/topology_converter
#    using topology data from: {{ topology_file }}
#    built with the following args: {{ arg_string }}
#
#    NOTE: in order to use this Vagrantfile you will need:
#       -Vagrant(v2.0.2+) installed: http://www.vagrantup.com/downloads
#       -the "helper_scripts" directory that comes packaged with topology-converter.py
{% if provider == 'virtualbox' %}#       -Virtualbox installed: https://www.virtualbox.org/wiki/Downloads

{% elif provider == 'libvirt' %}#        -Libvirt Installed -- guide to come
#       -Vagrant-Libvirt Plugin installed: $ vagrant plugin install vagrant-libvirt
#       -Start with \"vagrant up --provider=libvirt --no-parallel\n")

#  Libvirt Start Port: {{start_port}}
#  Libvirt Port Gap: {{port_gap}}

#Set the default provider to libvirt in the case they forget --provider=libvirt or if someone destroys a machine it reverts to virtualbox
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'

# Check required plugins
REQUIRED_PLUGINS_LIBVIRT = %w(vagrant-libvirt)
exit unless REQUIRED_PLUGINS_LIBVIRT.all? do |plugin|
  Vagrant.has_plugin?(plugin) || (
    puts "The #{plugin} plugin is required. Please install it with:"
    puts "$ vagrant plugin install #{plugin}"
    false
  )
end{% endif %}

Vagrant.require_version ">= 2.0.2"

# Fix for Older versions of Vagrant to Grab Images from the Correct Location
Vagrant::DEFAULT_SERVER_URL.replace('https://vagrantcloud.com')

$script = <<-SCRIPT
if grep -q -i 'cumulus' /etc/lsb-release &> /dev/null; then
    echo "### RUNNING CUMULUS EXTRA CONFIG ###"
    source /etc/lsb-release
    if [ -z /etc/app-release ]; then
        echo "  INFO: Detected NetQ TS Server"
        source /etc/app-release
        echo "  INFO: Running NetQ TS Appliance Version $APPLIANCE_VERSION"
    else
        if [[ $DISTRIB_RELEASE =~ ^2.* ]]; then
            echo "  INFO: Detected a 2.5.x Based Release"

            echo "  adding fake cl-acltool..."
            echo -e "#!/bin/bash\nexit 0" > /usr/bin/cl-acltool
            chmod 755 /usr/bin/cl-acltool

            echo "  adding fake cl-license..."
            echo -e "#!/bin/bash\nexit 0" > /usr/bin/cl-license
            chmod 755 /usr/bin/cl-license

            echo "  Disabling default remap on Cumulus VX..."
            mv -v /etc/init.d/rename_eth_swp /etc/init.d/rename_eth_swp.backup

            echo "### Rebooting to Apply Remap..."

        elif [[ $DISTRIB_RELEASE =~ ^3.* ]]; then
            echo "  INFO: Detected a 3.x Based Release"
            echo "### Disabling default remap on Cumulus VX..."
            mv -v /etc/hw_init.d/S10rename_eth_swp.sh /etc/S10rename_eth_swp.sh.backup &> /dev/null
            echo "### Disabling ZTP service..."
            systemctl stop ztp.service
            ztp -d 2>&1
            echo "### Resetting ZTP to work next boot..."
            ztp -R 2>&1
            echo "  INFO: Detected Cumulus Linux v$DISTRIB_RELEASE Release"
            if [[ $DISTRIB_RELEASE =~ ^3.[1-9].* ]]; then
                echo "### Fixing ONIE DHCP to avoid Vagrant Interface ###"
                echo "     Note: Installing from ONIE will undo these changes." 
                mkdir /tmp/foo
                mount LABEL=ONIE-BOOT /tmp/foo
                sed -i 's/eth0/eth1/g' /tmp/foo/grub/grub.cfg
                sed -i 's/eth0/eth1/g' /tmp/foo/onie/grub/grub-extra.cfg
                umount /tmp/foo
            fi
            if [[ $DISTRIB_RELEASE =~ ^3.[2-9].* ]]; then
                if [[ $(grep "vagrant" /etc/netd.conf | wc -l ) == 0 ]]; then
                    echo "### Giving Vagrant User Ability to Run NCLU Commands ###"
                    sed -i 's/users_with_edit = root, cumulus/users_with_edit = root, cumulus, vagrant/g' /etc/netd.conf
                    sed -i 's/users_with_show = root, cumulus/users_with_show = root, cumulus, vagrant/g' /etc/netd.conf
                fi
            fi
        fi
    fi
fi
echo "### DONE ###"
echo "### Rebooting Device to Apply Remap..."
nohup bash -c 'sleep 10; shutdown now -r "Rebooting to Remap Interfaces"' &
SCRIPT

Vagrant.configure("2") do |config|
{% if provider == 'virtualbox' %}
  simid = {{ epoch_time }}

  config.vm.provider "virtualbox" do |v|
    v.gui=false
{% elif provider == 'libvirt' %}
  config.vm.provider :libvirt do |domain|
    # increase nic adapter count to be greater than 8 for all VMs.
    domain.nic_adapter_count = 130{% endif %}
  end

{% if generate_ansible_hostfile == True %}
  #Generating Ansible Host File at following location:
  #    ./.vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "./helper_scripts/empty_playbook.yml"
{% if function_group is defined -%}
    # ANSIBLE GROUPS CONFIGURATION
    ansible.groups = {
{%- for function in function_group %}
      "{{ function }}" => [{% for device in function_group[function] %}"{{device}}",{% endfor %}],{% endfor %}
      "network:children" => [{% for function in function_group%}{% if function in network_functions%}"{{function}}",{% endif %}{% endfor %}]
    }
{%- endif %}
  end{% endif %}

{% for device in devices %}
  ##### DEFINE VM for {{ device.hostname }} #####
  config.vm.define "{{ device.hostname }}" do |device|
    {% if device.legacy is not defined %}
    device.vm.hostname = "{{ device.hostname }}" 
    {% endif %}{% if device.pxehost=="True" %} 
    device.ssh.insert_key = false
    {%  if provider == 'libvirt'%}
    #NO BOX USED FOR PXE DEVICE{% else %}
    device.vm.box = "{{ device.os }}"{% endif %}{% else %}
    device.vm.box = "{{ device.os }}"{% if device.version %}
    device.vm.box_version = "{{ device.version }}"{% endif %}{% endif %}{% if device.vagrant_user %}
    device.ssh.username = "{{ device.vagrant_user }}"{% endif %}
{% if provider == 'virtualbox' %}    device.vm.provider "virtualbox" do |v|
      v.name = "#{simid}_{{ device.hostname }}"
      v.customize ["modifyvm", :id, '--audiocontroller', 'AC97', '--audio', 'Null']{% elif provider == 'libvirt' %}
    device.vm.provider :libvirt do |v|{% if device.pxehost=="True" %}
      v.storage :file, :size => '100G', :type => 'qcow2', :bus => 'sata', :device => 'sda'
      v.boot 'hd'
      v.boot 'network'{% endif %}{% if device.function == 'host' %}
      v.nic_model_type = 'e1000' {% endif %}{% endif %}
{% if device.memory is defined %}      v.memory = {{ device.memory }}{% endif %}
    end{% if synced_folder == False %}
    #   see note here: https://github.com/pradels/vagrant-libvirt#synced-folders
    device.vm.synced_folder ".", "/vagrant", disabled: true{% endif %}

{% if device.ssh_port is defined %}    # SSH Port
    device.vm.network :forwarded_port, guest: 22, host: {{ device.ssh_port }}, host_ip: "0.0.0.0", id: "ssh", auto_correct:true
{%- endif %}

    # NETWORK INTERFACES{% for link in device.interfaces %}
      # link for {{ link.local_interface }} --> {{ link.remote_device }}:{{ link.remote_interface }}
      {% if provider == 'virtualbox' %}device.vm.network "private_network", virtualbox__intnet: "#{simid}_{{ link.network }}", auto_config: false , :mac => "{{ link.mac|replace(':', '') }}"
      {% elif provider == 'libvirt' %}device.vm.network "private_network",
            :mac => "{{ link.mac }}",
            :libvirt__tunnel_type => 'udp',
            :libvirt__tunnel_local_ip => '{{ link.local_ip }}',
            :libvirt__tunnel_local_port => '{{ link.local_port }}',
            :libvirt__tunnel_ip => '{{ link.remote_ip }}',
            :libvirt__tunnel_port => '{{ link.remote_port }}',
            :libvirt__iface_name => '{{ link.local_interface }}',
            auto_config: false{% endif %}{% endfor %}

{% if provider == 'virtualbox' %}    device.vm.provider "virtualbox" do |vbox|{% for i in range(2, 2+device.interfaces.__len__()) %}
      vbox.customize ['modifyvm', :id, '--nicpromisc{{i}}', 'allow-all']{% endfor %}
      vbox.customize ["modifyvm", :id, "--nictype1", "virtio"]{% if device.pxehost=="True" %}

      #Setup Interfaces for PXEBOOT
        #Adding network as a boot option.
        vbox.customize ["modifyvm", :id, "--boot4", "net"]

        #Setting Vagrant interface to lowest boot preference
        vbox.customize ["modifyvm", :id, "--nicbootprio1", "0"]
{% for link in device.interfaces %}{% if link.pxebootinterface %}{% if link.pxebootinterface == "True" %}
        #Setting Specified interface to highest preference.
        vbox.customize ["modifyvm", :id, "--nicbootprio{{loop.index+1}}", "1"]{% endif %}{% endif %}{% endfor %}{% endif %}
    end{% endif %}

    # Fixes "stdin: is not a tty" and "mesg: ttyname failed : Inappropriate ioctl for device"  messages --> https://github.com/mitchellh/vagrant/issues/1673
    device.vm.provision :shell , inline: "(sudo grep -q 'mesg n' /root/.profile 2>/dev/null && sudo sed -i '/mesg n/d' /root/.profile  2>/dev/null) || true;", privileged: false

    {% if "ubuntu" in device.os.lower() -%}
    # Shorten Boot Process - Applies to Ubuntu Only - remove \"Wait for Network\"
    device.vm.provision :shell , inline: "sed -i 's/sleep [0-9]*/sleep 1/' /etc/init/failsafe.conf 2>/dev/null || true"

    {% endif -%}
{% if device.function == "oob-server" and create_mgmt_device -%}
    #Copy over DHCP files and MGMT Network Files
    device.vm.provision "file", source: "{{ script_storage }}/auto_mgmt_network/dhcpd.conf", destination: "~/dhcpd.conf"
    device.vm.provision "file", source: "{{ script_storage }}/auto_mgmt_network/dhcpd.hosts", destination: "~/dhcpd.hosts"
    device.vm.provision "file", source: "{{ script_storage }}/auto_mgmt_network/hosts", destination: "~/hosts"
    device.vm.provision "file", source: "{{ script_storage }}/auto_mgmt_network/ansible_hostfile", destination: "~/ansible_hostfile"
    device.vm.provision "file", source: "{{ script_storage }}/auto_mgmt_network/ztp_oob.sh", destination: "~/ztp_oob.sh"
{% endif -%}
{% if create_mgmt_device and device.function != "Unknown" and device.function != "oob-server" and device.function != "host" -%}

    #Copy over Topology.dot File
    device.vm.provision "file", source: "{{ topology_file }}", destination: "~/topology.dot"
    device.vm.provision :shell, privileged: false, inline: "sudo mv ~/topology.dot /etc/ptm.d/topology.dot"

{% endif -%}

{% if device.function == "oob-switch" and create_mgmt_device -%}
      # Transfer Bridge File
      device.vm.provision "file", source: "{{ script_storage }}/auto_mgmt_network/bridge-untagged", destination: "~/bridge-untagged"
{% endif -%}

{% if device.config is defined %}
    # Run the Config specified in the Node Attributes
    device.vm.provision :shell , privileged: false, :inline => 'echo "$(whoami)" > /tmp/normal_user'
    device.vm.provision :shell , path: "{{ device.config }}"
{% endif %}

    # Install Rules for the interface re-map
    {% if device.pxehost=="True" and provider == 'libvirt' -%}
      # NO REMAP for LIBVIRT PXE DEVICE
    {% elif device.remap=="False" -%}
      # REMAP Disabled for this node
    {% else -%}
    device.vm.provision :shell , :inline => <<-delete_udev_directory
if [ -d "/etc/udev/rules.d/70-persistent-net.rules" ]; then
    rm -rfv /etc/udev/rules.d/70-persistent-net.rules &> /dev/null
fi
rm -rfv /etc/udev/rules.d/70-persistent-net.rules &> /dev/null
delete_udev_directory

{% for link in device.interfaces -%}

      device.vm.provision :shell , :inline => <<-udev_rule
echo "  INFO: Adding UDEV Rule: {{ link.mac }} --> {{ link.local_interface }}"
echo 'ACTION=="add", SUBSYSTEM=="net", ATTR{address}=="{{ link.mac }}", NAME="{{ link.local_interface }}", SUBSYSTEMS=="pci"' >> /etc/udev/rules.d/70-persistent-net.rules
udev_rule
     {% endfor %}
      device.vm.provision :shell , :inline => <<-vagrant_interface_rule
echo "  INFO: Adding UDEV Rule: Vagrant interface = {% if device.vagrant %}{{ device.vagrant }}{%else%}vagrant{% endif%}"
echo 'ACTION=="add", SUBSYSTEM=="net", ATTR{ifindex}=="2", NAME="{% if device.vagrant %}{{ device.vagrant }}{%else%}vagrant{% endif%}", SUBSYSTEMS=="pci"' >> /etc/udev/rules.d/70-persistent-net.rules
echo "#### UDEV Rules (/etc/udev/rules.d/70-persistent-net.rules) ####"
cat /etc/udev/rules.d/70-persistent-net.rules
vagrant_interface_rule

{% endif -%}

{% if device.playbook is defined %}
    # Ansible Playbook Configuration
    device.vm.provision "ansible" do |ansible|
          ansible.playbook = "{{ device.playbook }}"
{%- if function_group is defined %}
          # ANSIBLE GROUPS CONFIGURATION
          ansible.groups = {
{%- for function in function_group%}
            "{{ function }}" => [{% for device in function_group[function] %}"{{device}}",{% endfor %}],
{%- endfor %}
            "network:children" => [{% for function in function_group%}{% if function in network_functions%}"{{function}}",{% endif %}{% endfor %}]
          }
{%- endif %}
    end
{% endif -%}

{% if device.pxehost=="True" and provider == 'libvirt' -%}

    # NO REMAP APPLICATION for LIBVIRT PXE DEVICE
{% elif device.remap=="False" -%}

    # NO REMAP APPLICATION Required

{% else -%}
    # Run Any Platform Specific Code and Apply the interface Re-map
    #   (may or may not perform a reboot depending on platform)
    device.vm.provision :shell , :inline => $script

{% endif -%}
  end
{% endfor %}


end
